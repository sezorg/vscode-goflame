#!/bin/bash
# Copyright 2024 RnD Center "ELVEES", JSC

BASE=$(realpath "$(dirname "$PWD/${BASH_SOURCE[0]}")")

export http_proxy=
export ftp_proxy=$http_proxy
export https_proxy=$http_proxy
export no_proxy=

red=$(printf "\e[31m")
green=$(printf "\e[32m")
blue=$(printf "\e[34m")
gray=$(printf "\e[90m")
nc=$(printf "\e[0m")

function debug() {
	#echo "${green}DEBUG: $*$nc" >&2
	return
}

function log() {
	echo "$*" >&2
}

function error() {
	echo "$red  *** ERROR: $*$nc" >&2
}

function fatal() {
	error "$*"
	exit 1
}

function help() {
	log "Usage: $blue./TestScript$nc [$gray<args...>$nc] [${gray}IP$nc] [${gray}param=value$nc ...]"
	log "Arguments:"
	log "   ${blue}./TestScript$nc                selected script with JSON/SOAP test template"
	log "   ${gray}-h, --help, help$nc            print this help screen and exit"
	log "   ${gray}-t, --timeout, timeout$nc ${green}SEC$nc  specify command timeout in seconds"
	log "   ${gray}-u, --user, user$nc ${green}NAME$nc       user account name to login via ONVIF"
	log "   ${gray}-p, --pass, pass$nc ${green}PASS$nc       password string for selected user accout"
	log "   ${gray}IP$nc                          IPv4 address of the destination camera"
	log "   ${gray}param=value$nc                 replace JSON/SOAP data with specified value"
	log "Example:"
	log "   ${blue}./GetImagingSettings$nc ${gray}192.168.0.1$nc ${gray}--timeout$nc ${green}10$nc"
	log "   ${blue}./GetImagingSettings$nc ${gray}VideoSourceToken=\"src\"$nc"
}

function is_true() {
	[[ "${1^^}" =~ ^(1|T|TRUE|Y|YES)$ ]]
}

function is_false() {
	[[ ! "${1^^}" =~ ^(1|T|TRUE|Y|YES)$ ]]
}

IP=""
ARGS=()
DEF_TIMEOUT="2"
TIMEOUT=""
USER="admin"
PASS="admin"
NO_AUTH=false
while [[ "$#" != 0 ]]; do
	debug "arg: $1"
	case "$1" in
	-h | --help | help)
		shift
		help
		exit 0
		;;
	-t | --timeout | timeout)
		shift
		if [[ "$#" == 0 ]]; then
			fatal "Expected timeout parameter, seconds"
		fi
		TIMEOUT="$1"
		shift
		;;
	-u | --user | user)
		shift
		if [[ "$#" == 0 ]]; then
			fatal "Expected user name parameter"
		fi
		USER="$1"
		shift
		;;
	-p | --pass | pass)
		shift
		if [[ "$#" == 0 ]]; then
			fatal "Expected password parameter"
		fi
		PASS="$1"
		shift
		;;
	*)
		if [[ "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
			if [[ "$IP" != "" ]]; then
				fatal "Duplicate IP address"
			fi
			IP="$1"
		else
			ARGS+=("$1")
		fi
		shift
		;;
	esac
done

if [[ "$IP" == "" ]]; then
	if [[ -f "$BASE/../../config.ini" ]]; then
		source "$BASE/../../config.ini"
		IP="$TARGET_IPADDR"
	fi
	if [[ -f "$BASE/../../config-user.ini" ]]; then
		source "$BASE/../../config-user.ini"
		IP="$TARGET_IPADDR"
	fi
	if [[ -f "/var/tmp/goflame/config-vscode.ini" ]]; then
		source "/var/tmp/goflame/config-vscode.ini"
		IP="$TARGET_IPADDR"
	fi
fi

if [[ "$IP" == "" ]]; then
	error "No IP specified."
	exit 1
fi

function sed_exp() {
	local exp="$1"
	debug "sed_exp:  input: $exp"
	exp=${exp//\[\[:space:\]\]/\\s}
	exp=${exp//\[\[:word:\]\]/\\w}
	exp=${exp//(/\\(}
	exp=${exp//)/\\)}
	debug "sed_exp: output: $exp"
	echo "$exp"
}

function sed_json() {
	local arg_name="$1" arg_data="$2"
	shift
	shift
	while [[ $# -gt 0 ]]; do
		local arg_exp="$1" arg_rep="$2"
		shift
		shift
		if [[ "$JSON" =~ $arg_exp ]]; then
			# shellcheck disable=SC2001
			JSON=$(sed "s/$(sed_exp "$arg_exp")/$arg_rep/g" <<<"$JSON")
			return
		fi
	done
	fatal "Failed to replace argument with name \"$arg_name\", value \"$arg_data\""
}

function parse_json_args() {
	for arg_pair in "${ARGS[@]}"; do
		debug "parse_json_args: input entry: $arg_pair"
		IFS='='
		# shellcheck disable=SC2206
		arg_items=($arg_pair)
		unset IFS
		local arg_name arg_data
		if [[ "${#arg_items[@]}" == "1" ]]; then
			arg_name="${arg_items[0]}" arg_data=""
		elif [[ "${#arg_items[@]}" == "2" ]]; then
			arg_name="${arg_items[0]}" arg_data="${arg_items[1]}"
		else
			fatal "Invalid argument entry: \"$arg_pair\""
		fi
		debug "parse_json_args: value: $arg_name"="$arg_data"
		sed_json "$arg_name" "$arg_data" \
			"(\"$arg_name\"[[:space:]]*:[[:space:]]*\")(.*)(\")" "\\1$arg_data\\3" \
			"(\"$arg_name\"[[:space:]]*:[[:space:]]*)([[:alnum:]\.\$_+-]*)" "\\1$arg_data"
	done
}

function format_time() {
	local from="$1" to="$2"
	local time days days_frac hours hours_frac mins secs pad="0000000"
	time=$(echo "$to - $from" | bc)
	days=$(echo "$time/86400" | bc)
	days_frac=$(echo "$time-86400*$days" | bc)
	hours=$(echo "$days_frac/3600" | bc)
	hours_frac=$(echo "$days_frac-3600*$hours" | bc)
	mins=$(echo "$hours_frac/60" | bc)
	secs=$(echo "$hours_frac-60*$mins" | bc)
	secs=$(printf "%02.3fs" "$secs")
	secs="${pad:${#secs}}$secs"
	if [[ "$days" != "0" ]]; then
		printf "%dd %02.2dh %02.2dm %s" "$days" "$hours" "$mins" "$secs"
	elif [[ "$hours" != "0" ]]; then
		printf "%dh %02.2dm %s" "$hours" "$mins" "$secs"
	elif [[ "$mins" != "0" ]]; then
		printf "%dm %s" "$mins" "$secs"
	else
		printf "%s" "$secs"
	fi
}

function print_json() {
	local type="$1"
	shift
	local json_text="$*" decoded="" status=""
	decoded=$(echo "$json_text" | jq 2>&1)
	status=$(echo "$decoded" | grep "parse error:")
	if [[ "$status" != "" ]]; then
		error "Malformed JSON $type."
		error "Json: $decoded"
		fatal "Text: $json_text"
	fi
	echo "$json_text" | jq
	return 0
}

function set_timeout() {
	if [[ "$TIMEOUT" == "" ]]; then
		TIMEOUT="$1"
	fi
}

function json_test() {
	parse_json_args
	local service method output retcode status decoded start_time elapsed args
	service="$(dirname "$1")"
	method="$(basename -- "$1")"
	log "$blue$IP$nc: $gray$service.$method()$nc"
	log "IN:"
	print_json "request" "$JSON"
	start_time="$(date +%s.%N)"
	if [[ "$TIMEOUT" == "" ]]; then
		TIMEOUT="$DEF_TIMEOUT"
	fi
	args=(-a "$IP")
	if is_false "$NO_AUTH"; then
		args+=(-u "$USER" -p "$PASS")
	fi
	args+=(-s "$service" -c "$method")
	#log "Calling: python3 $BASE/ipcam_request.py ${args[@]} -l $JSON"
	output=$(timeout "$TIMEOUT" python3 "$BASE/ipcam_request.py" "${args[@]}" -l "$JSON" 2>&1)
	retcode="$?"
	elapsed=$(format_time "$start_time" "$(date +%s.%N)")
	if [[ "$retcode" == "124" ]]; then
		fatal "Operation is timed out in $elapsed"
	fi
	status=$(echo "$output" | grep "No route to host")
	if [[ "$status" != "" ]]; then
		fatal "IP $IP: No route to host, $elapsed."
	fi
	log "OUT in $elapsed:"
	print_json "response" "$output"
}

function soap_test() {
	parse_json_args
	local service method output retcode status decoded start_time elapsed
	service="$(dirname "$1")"
	method="$(basename -- "$1")"
	log "$blue$IP$nc: $gray$service.$method()$nc"
	log "IN:"
	print_json "request" "$JSON"
	start_time="$(date +%s.%N)"
	if [[ "$TIMEOUT" == "" ]]; then
		TIMEOUT="$DEF_TIMEOUT"
	fi
	output=$(timeout "$TIMEOUT" python3 "$BASE/ipcam_request.py" \
		-a "$IP" -u "$USER" -p "$PASS" -S -s "$service" -c "$method" -l "$JSON" 2>&1)
	retcode="$?"
	elapsed=$(format_time "$start_time" "$(date +%s.%N)")
	if [[ "$retcode" == "124" ]]; then
		fatal "Operation is timed out in $elapsed"
	fi
	status=$(echo "$output" | grep "No route to host")
	if [[ "$status" != "" ]]; then
		fatal "IP $IP: No route to host, $elapsed."
	fi
	log "OUT in $elapsed:"
	print_json "response" "$output"
}
