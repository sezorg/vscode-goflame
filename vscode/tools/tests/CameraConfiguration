#!/bin/bash

BASE=$(realpath "$(dirname "$PWD/${BASH_SOURCE[0]}")")
IP=10.113.11.65
ARGS=("$@")

if [[ -f "$BASE/../../config.ini" ]]; then
	source "$BASE/../../config.ini"
	IP="$TARGET_IPADDR"
fi
if [[ -f "$BASE/../../config-user.ini" ]]; then
	source "$BASE/../../config-user.ini"
	IP="$TARGET_IPADDR"
fi
if [[ -f "/var/tmp/goflame/config-vscode.ini" ]]; then
	source "/var/tmp/goflame/config-vscode.ini"
	IP="$TARGET_IPADDR"
fi

function debug() {
	#echo "$*" >&2
	return
}

function log() {
	echo "$*" >&2
}

function error() {
	echo "ERROR: $*" >&2
}

function fatal() {
	error "$*" >&2
	exit 1
}

function sed_exp() {
	local exp="$1"
	debug "sed_exp:  input: $exp"
	exp=${exp//\[\[:space:\]\]/\\s}
	exp=${exp//\[\[:word:\]\]/\\w}
	exp=${exp//(/\\(}
	exp=${exp//)/\\)}
	debug "sed_exp: output: $exp"
	echo "$exp"
}

function sed_json() {
	local arg_name="$1" arg_data="$2"
	shift
	shift
	while [[ $# -gt 0 ]]; do
		local arg_exp="$1" arg_rep="$2"
		shift
		shift
		if [[ "$JSON" =~ $arg_exp ]]; then
			arg_match="1"
			# shellcheck disable=SC2001
			JSON=$(sed "s/$(sed_exp "$arg_exp")/$arg_rep/g" <<<"$JSON")
			return
		fi
	done
	fatal "Failed to replace argument with name \"$arg_name\", value \"$arg_data\""
}

function parse_json_args() {
	for arg_pair in "${ARGS[@]}"; do
		debug "parse_json_args: input entry: $arg_pair"
		IFS='='
		# shellcheck disable=SC2206
		arg_items=($arg_pair)
		unset IFS
		local arg_name arg_data
		if [[ "${#arg_items[@]}" == "1" ]]; then
			arg_name="${arg_items[0]}" arg_data=""
		elif [[ "${#arg_items[@]}" == "2" ]]; then
			arg_name="${arg_items[0]}" arg_data="${arg_items[1]}"
		else
			fatal "Invalid argument entry: \"$arg_pair\""
		fi
		debug "parse_json_args: value: $arg_name"="$arg_data"
		sed_json "$arg_name" "$arg_data" \
			"(\"$arg_name\"[[:space:]]*:[[:space:]]*\")(.*)(\")" "\\1$arg_data\\3" \
			"(\"$arg_name\"[[:space:]]*:[[:space:]]*)([[:alnum:]\.\$_+-]*)" "\\1$arg_data"
	done
}

function format_time() {
	local from="$1" to="$2"
	local time days days_frac hours hours_frac mins secs pad="0000000"
	time=$(echo "$to - $from" | bc)
	days=$(echo "$time/86400" | bc)
	days_frac=$(echo "$time-86400*$days" | bc)
	hours=$(echo "$days_frac/3600" | bc)
	hours_frac=$(echo "$days_frac-3600*$hours" | bc)
	mins=$(echo "$hours_frac/60" | bc)
	secs=$(echo "$hours_frac-60*$mins" | bc)
	secs=$(printf "%02.3fs" "$secs")
	secs="${pad:${#secs}}$secs"
	if [[ "$days" != "0" ]]; then
		printf "%dd %02.2dh %02.2dm %s" "$days" "$hours" "$mins" "$secs"
	elif [[ "$hours" != "0" ]]; then
		printf "%dh %02.2dm %s" "$hours" "$mins" "$secs"
	elif [[ "$mins" != "0" ]]; then
		printf "%dm %s" "$mins" "$secs"
	else
		printf "%s" "$secs"
	fi
}

function print_json() {
	local type="$1"
	shift
	local json_text="$*" decoded="" status=""
	decoded=$(echo "$json_text" | jq 2>&1)
	status=$(echo "$decoded" | grep "parse error:")
	if [[ "$status" != "" ]]; then
		error "Malformed JSON $type."
		error "Json: $decoded"
		fatal "Text: $json_text"
	fi
	echo "$json_text" | jq
	return 0
}

function json_test() {
	parse_json_args
	local service method output status decoded start_time end_time
	service="$(dirname "$1")"
	method="$(basename -- "$1")"
	log "$IP: $service.$method()"
	log "IN:"
	print_json "request" "$JSON"
	# ecamapi/ecam request -a 10.9.11.104 -u admin -p admin --no-proxy -s recording -c "GetServiceCapabilities" | jq
	start_time="$(date +%s.%N)"
	output=$(python3 "$BASE/ipcam_request.py" -a $IP -s "$service" -c "$method" -l "$JSON" 2>&1)
	status=$(echo "$output" | grep "No route to host")
	if [[ "$status" != "" ]]; then
		fatal "IP $IP: No route to host."
	fi
	end_time="$(date +%s.%N)"
	log "OUT in $(format_time "$start_time" "$end_time"):"
	print_json "response" "$output"
}
